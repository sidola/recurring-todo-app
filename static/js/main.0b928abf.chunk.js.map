{"version":3,"sources":["util/recur-engine.ts","redux/actions.ts","component/TodoListName.tsx","component/ListRenamingInput.tsx","component/DeleteTodoListModal.tsx","component/TodoListHeader.tsx","component/TodoList.tsx","component/ListOfTodoLists.tsx","App.tsx","serviceWorker.ts","redux/store.ts","redux/local-storage.ts","index.tsx"],"names":["calculateRecurs","recurs","now","nowDate","Date","periodLengthMs","period","length","Error","getPeriodLengthAsMilli","periodStartDate","previouslyRecurred","startFrom","nextRecurDate","addMilliseconds","isAfter","hasRecurred","previousRecurredDate","timeUntilRecurs","differenceInMilliseconds","possiblyTheFuture","AppActions","resetRecuringItems","createAction","addTodoItem","action","p","updateItem","deleteItem","renameList","updateWhenListRecurs","a","createNewList","deleteList","copyList","changeActiveList","AppReducers","state","newLists","lists","map","list","recursCalc","modifiedAt","items","item","isChecked","updateList","TodoListName","props","className","style","cursor","onClick","this","handleBeginRename","listName","Button","minWidth","disabled","copyDisabled","size","color","onCopy","deleteDisabled","onDelete","React","Component","ListRenamingInput","newListName","currentListName","handleInput","bind","Input","autoFocus","value","onChange","onKeyDown","event","key","handleEndRename","onBlur","input","target","setState","DeleteTodoListModal","Modal","backdrop","fade","isOpen","toggle","handleClose","ModalHeader","ModalBody","ModalFooter","handleDelete","TodoListHeader","renamingList","deleteModalVisible","beginRenameList","endRenameList","toggleDeleteModalVisiblity","id","disableDelete","connect","disp","listId","name","TodoList","newItemName","showModify","handleCreateNewItem","handleNewItemNameChanged","handleItemCheckbox","toggleEdit","handleResetDateChanged","handleResetTimeChanged","preventDefault","trim","uuid","createdAt","itemText","checked","prevState","newDate","oldHours","getHours","oldMinutes","getMinutes","newStartFrom","setSeconds","setMinutes","setHours","newTime","isFuture","newHours","newMinutes","listItems","sort","b","localeCompare","unCompletedItems","filter","completedItems","tabIndex","onKeyPress","Row","Col","lg","Label","type","min","handleResetLengthChanged","CustomInput","handleResetPeriodChanged","selected","maxDate","dateFormat","strictParsing","date","maxTime","minTime","startOfDay","timeCaption","showTimeSelect","showTimeSelectOnly","timeIntervals","timeFormat","Form","onSubmit","placeholder","label","itemId","TimeUntil","resetDateTime","lightFormat","resetsIn","format","title","ListItemContent","itemProgress","ListOfTodoLists","handleChangeActiveList","activeListId","aRecurs","bRecurs","completedLists","nonEmptyNonCompletedLists","emptyLists","ListGroup","flush","isActive","ListGroupItem","tag","active","App","Container","activeList","fontSize","packageJson","version","Boolean","window","location","hostname","match","createEmptyList","firstListUuid","initState","reduxDevTools","composeWithDevTools","actionsBlacklist","store","createStore","getType","payload","prunedListsList","listIndex","findIndex","nextIndex","listToCopy","find","newList","concat","push","updatedItem","listToUpdate","jsonState","localStorage","getItem","JSON","parse","test","error","console","loadFromLocalStorage","subscribe","stringify","setItem","saveToLocalStorage","getState","dispatch","setInterval","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b928abf.chunk.js","sourcesContent":["import { Recurs, List } from \"../model/models\";\nimport { differenceInMilliseconds, addMilliseconds, isAfter } from \"date-fns\";\n\nfunction getPeriodLengthAsMilli(recurs: Recurs) {\n    const HOUR_AS_MILLI = 3600000\n\n    switch (recurs.period) {\n        case \"weeks\": {\n            return (recurs.length * 24 * 7) * HOUR_AS_MILLI\n        }\n\n        case \"days\": {\n            return (recurs.length * 24) * HOUR_AS_MILLI\n        }\n\n        case \"hours\": {\n            return recurs.length * HOUR_AS_MILLI\n        }\n\n        default: {\n            throw new Error(`Unhandled recurs period: ${recurs.period}`)\n        }\n    }\n}\n\nexport function calculateRecurs(recurs: Recurs, now?: Date): {\n    hasRecurred: boolean,\n    previousRecurredDate: Date,\n    timeUntilRecurs: number,\n} {\n\n    const nowDate: Date = (now ? now : new Date())\n    const periodLengthMs = getPeriodLengthAsMilli(recurs)\n\n    const periodStartDate: Date = (recurs.previouslyRecurred)\n        ? recurs.previouslyRecurred\n        : recurs.startFrom\n\n    const nextRecurDate = addMilliseconds(periodStartDate, periodLengthMs)\n\n    if (isAfter(nextRecurDate, nowDate)) {\n        return {\n            hasRecurred: false,\n            previousRecurredDate: periodStartDate,\n            timeUntilRecurs: differenceInMilliseconds(nextRecurDate, nowDate),\n        }\n    }\n\n    // At this point, we know we have recurred, what we need to do now\n    // is figure out if we've skipped intervals and calculate the correct\n    // value for previousRecurredDate\n    let previousRecurredDate = nextRecurDate\n\n    while (true) {\n        const possiblyTheFuture = addMilliseconds(previousRecurredDate, periodLengthMs)\n\n        // This means the next occurrance will happen in the future\n        // So the current previousRecurredDate is the correct one\n        if (isAfter(possiblyTheFuture, nowDate)) {\n            break\n        }\n\n        // If it wasn't in the future, it's safe to increment our\n        // date with one more period\n        previousRecurredDate = addMilliseconds(previousRecurredDate, periodLengthMs)\n    }\n\n    return {\n        hasRecurred: true,\n        previousRecurredDate: previousRecurredDate,\n        timeUntilRecurs: differenceInMilliseconds(nextRecurDate, nowDate),\n    }\n}\n\nexport function updateList(list: List) {\n    const recursCalc = calculateRecurs(list.recurs)\n\n    if (recursCalc.hasRecurred === false) {\n        return list\n    }\n\n    const updatedList: List = {\n        ...list,\n        recurs: {\n            ...list.recurs,\n            previouslyRecurred: recursCalc.previousRecurredDate,\n        },\n        modifiedAt: new Date(),\n        items: list.items.map(item => {\n            return {\n                ...item,\n                isChecked: false,\n                modifiedAt: new Date()\n            }\n        })\n    }\n\n    return updatedList\n}\n","import { createAction } from \"typesafe-actions\";\nimport { Item, Recurs } from \"../model/models\";\nimport { RootState } from \"./store\";\nimport { updateList } from \"../util/recur-engine\";\n\nexport const AppActions = {\n\n    resetRecuringItems: createAction('@HIDDEN/resetRecuringItems'),\n\n    addTodoItem: createAction('addTodoItem', action => {\n        return (p: { listId: string, item: Item }) => action(p)\n    }),\n\n    updateItem: createAction('updateItem', action => {\n        return (p: { listId: string, item: Item }) => action(p)\n    }),\n\n    deleteItem: createAction('deleteItem', action => {\n        return (p: { listId: string, itemId: string }) => action(p)\n    }),\n\n    renameList: createAction('renameList', action => {\n        return (p: { listId: string, name: string }) => action(p)\n    }),\n\n    updateWhenListRecurs: createAction('updateWhenListRecurs', a => {\n        return (p: { listId: string, recurs: Recurs }) => a(p)\n    }),\n\n    createNewList: createAction('createNewList'),\n\n    deleteList: createAction('deleteList', action => {\n        return (p: { listId: string }) => action(p)\n    }),\n\n    copyList: createAction('copyList', action => {\n        return (p: { listId: string }) => action(p)\n    }),\n\n    changeActiveList: createAction('changeActiveList', action => {\n        return (p: { listId: string }) => action(p)\n    }),\n\n}\n\nexport const AppReducers = {\n\n    resetRecuringItems: (\n        state: RootState,\n        action: ReturnType<typeof AppActions.resetRecuringItems>\n    ) => {\n\n        const newLists = state.lists.map(list => {\n            return updateList(list)\n        })\n\n        return {\n            ...state,\n            lists: newLists\n        }\n\n    }\n\n}\n","import React from 'react'\nimport { Button } from 'reactstrap'\n\ninterface Props {\n    listName: string,\n    handleBeginRename: () => void,\n    deleteDisabled: boolean,\n    copyDisabled: boolean,\n    onDelete: () => void,\n    onCopy: () => void,\n}\n\ninterface State {\n}\n\nexport default class TodoListName extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props)\n    }\n\n    public render() {\n        return (\n            <div className=\"mb-4 d-flex align-items-center\">\n                <h2 className=\"w-100 mb-0 mr-2 list-name-text\" style={{ cursor: \"pointer\" }} onClick={this.props.handleBeginRename}>\n                    {this.props.listName}\n                </h2>\n\n                <Button\n                    style={{ minWidth: \"60px\" }}\n                    className=\"ml-2\"\n                    disabled={this.props.copyDisabled}\n                    size=\"sm\"\n                    color=\"secondary\"\n                    onClick={this.props.onCopy}>\n\n                    Copy\n\n                </Button>\n                <Button\n                    style={{ minWidth: \"60px\" }}\n                    className=\"ml-2\"\n                    disabled={this.props.deleteDisabled}\n                    size=\"sm\"\n                    color=\"danger\"\n                    onClick={this.props.onDelete}>\n\n                    Delete\n\n                </Button>\n            </div>\n        )\n    }\n\n}\n","import React from 'react'\nimport { Input } from 'reactstrap'\n\ninterface Props {\n    currentListName: string,\n    handleEndRename: (newListName: string) => void\n}\n\ninterface State {\n    newListName: string,\n}\n\nexport default class ListRenamingInput extends React.Component<Props, State> {\n\n    readonly state = {\n        newListName: this.props.currentListName\n    }\n\n    constructor(props: Props) {\n        super(props)\n\n        this.handleInput = this.handleInput.bind(this)\n    }\n\n    public render() {\n        return (\n            <div className=\"mb-4 d-flex flex-column\">\n                <Input\n                    autoFocus={true}\n                    value={this.state.newListName}\n                    onChange={this.handleInput}\n                    onKeyDown={(event: React.KeyboardEvent<HTMLInputElement>) => {\n                        if (event.key === \"Enter\") {\n                            this.props.handleEndRename(this.state.newListName)\n                        }\n                    }}\n                    onBlur={() => {\n                        this.props.handleEndRename(this.state.newListName)\n                    }}\n                />\n            </div>\n        )\n    }\n\n    private handleInput(event: any) {\n        const input = event.target.value as string\n\n        this.setState({\n            newListName: input\n        })\n    }\n\n}\n","import React from 'react'\nimport { ModalFooter, Modal, ModalHeader, ModalBody, Button } from 'reactstrap'\n\ninterface Props {\n    isOpen: boolean\n    handleClose: () => void,\n    handleDelete: () => void,\n}\n\ninterface State {\n}\n\nexport default class DeleteTodoListModal extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props)\n    }\n\n    public render() {\n        return (\n            <Modal backdrop={\"static\"} fade={false} isOpen={this.props.isOpen} toggle={this.props.handleClose}>\n                <ModalHeader toggle={this.props.handleClose}>Confirm</ModalHeader>\n                <ModalBody>\n                    You're about to remove a list that contains items. This action\n                    cannot be undone. Do you want to continue?\n                </ModalBody>\n                <ModalFooter>\n                    <Button color=\"danger\" onClick={this.props.handleDelete}>\n                        Delete list\n                    </Button>\n\n                    <Button color=\"secondary\" onClick={this.props.handleClose}>\n                        Cancel\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        )\n    }\n\n}\n","import React, { Dispatch, Fragment } from 'react'\nimport TodoListName from './TodoListName'\nimport ListRenamingInput from './ListRenamingInput'\nimport { ActionType } from 'typesafe-actions'\nimport { AppActions } from '../redux/actions'\nimport { RootState } from '../redux/store'\nimport { List } from '../model/models'\nimport { connect } from 'react-redux'\nimport DeleteTodoListModal from './DeleteTodoListModal'\n\nfunction mapStateToProps(state: RootState) {\n    return {\n        // Cannot delete last list\n        disableDelete: state.lists.length === 1\n    }\n}\n\nfunction mapDispToProps(disp: Dispatch<ActionType<typeof AppActions>>) {\n    return {\n        renameList: (listId: string, name: string) =>\n            disp(AppActions.renameList({ listId, name })),\n\n        deleteList: (listId: string) =>\n            disp(AppActions.deleteList({ listId })),\n\n        copyList: (listId: string) =>\n            disp(AppActions.copyList({ listId })),\n    }\n}\n\ntype Props = ReturnType<typeof mapDispToProps>\n    & ReturnType<typeof mapStateToProps>\n    & { list: List }\n\ntype State = {\n    renamingList: boolean,\n    deleteModalVisible: boolean,\n}\n\nclass TodoListHeader extends React.Component<Props, State> {\n\n    readonly state = {\n        renamingList: false,\n        deleteModalVisible: false,\n    }\n\n    constructor(props: Props) {\n        super(props)\n\n        this.beginRenameList = this.beginRenameList.bind(this)\n        this.endRenameList = this.endRenameList.bind(this)\n        this.toggleDeleteModalVisiblity = this.toggleDeleteModalVisiblity.bind(this)\n    }\n\n    public render() {\n\n        return (\n            <Fragment>\n\n                <DeleteTodoListModal\n                    isOpen={this.state.deleteModalVisible}\n                    handleClose={this.toggleDeleteModalVisiblity}\n                    handleDelete={() => {\n                        this.props.deleteList(this.props.list.id)\n                        this.toggleDeleteModalVisiblity()\n                    }} />\n\n                {this.state.renamingList &&\n                    <ListRenamingInput\n                        currentListName={this.props.list.listName}\n                        handleEndRename={this.endRenameList} />\n                }\n\n                {this.state.renamingList === false &&\n                    <TodoListName\n                        listName={this.props.list.listName}\n                        handleBeginRename={this.beginRenameList}\n                        deleteDisabled={this.props.disableDelete}\n                        copyDisabled={this.props.list.items.length <= 0}\n                        onDelete={() => {\n                            if (this.props.list.items.length > 0) {\n                                this.toggleDeleteModalVisiblity()\n                            } else {\n                                this.props.deleteList(this.props.list.id)\n                            }\n                        }}\n                        onCopy={() => {\n                            if (this.props.list.items.length > 0) {\n                                this.props.copyList(this.props.list.id)\n                            }\n                        }}\n                    />\n                }\n            </Fragment>\n        )\n    }\n\n    private beginRenameList() {\n        this.setState({\n            renamingList: true,\n        })\n    }\n\n    private endRenameList(newListName: string) {\n        if (newListName !== \"\") {\n            this.props.renameList(this.props.list.id, newListName)\n        }\n\n        this.setState({\n            renamingList: false,\n        })\n    }\n\n    private toggleDeleteModalVisiblity() {\n        this.setState((state) => {\n            return {\n                deleteModalVisible: !state.deleteModalVisible\n            }\n        })\n    }\n\n}\n\nexport default connect(mapStateToProps, mapDispToProps)(TodoListHeader)\n","import React, { Fragment, Dispatch } from \"react\";\nimport { List, Item, Recurs } from \"../model/models\";\nimport { Input, CustomInput, Label, Button, Form, Row, Col } from \"reactstrap\";\nimport { ActionType } from \"typesafe-actions\";\nimport { AppActions } from \"../redux/actions\";\nimport { connect } from \"react-redux\";\nimport * as uuid from \"uuid\"\nimport { RootState } from \"../redux/store\";\nimport { setHours, setMinutes, isFuture, startOfDay, setSeconds } from \"date-fns\";\nimport ReactDatePicker from \"react-datepicker\";\nimport TodoListHeader from \"./TodoListHeader\";\n\nfunction mapStateToProps(state: RootState) {\n    return {\n        // Cannot delete last list\n        disableDelete: state.lists.length === 1\n    }\n}\n\nfunction mapDispToProps(disp: Dispatch<ActionType<typeof AppActions>>) {\n    return {\n        addTodoItem: (listId: string, item: Item) =>\n            disp(AppActions.addTodoItem({ listId, item })),\n\n        updateItem: (listId: string, item: Item) =>\n            disp(AppActions.updateItem({ listId, item })),\n\n        deleteItem: (listId: string, itemId: string) =>\n            disp(AppActions.deleteItem({ listId, itemId })),\n\n        updateWhenListRecurs: (listId: string, recurs: Recurs) =>\n            disp(AppActions.updateWhenListRecurs({ listId, recurs }))\n    }\n}\n\ntype Props = ReturnType<typeof mapDispToProps>\n    & ReturnType<typeof mapStateToProps>\n    & { list: List }\n\nclass TodoList extends React.Component<Props, {\n    newItemName: string,\n    renamingList: boolean,\n    showModify: boolean,\n}> {\n\n    readonly state = {\n        newItemName: \"\",\n        renamingList: false,\n        showModify: false,\n    }\n\n    public constructor(props: Props) {\n        super(props)\n\n        this.handleCreateNewItem = this.handleCreateNewItem.bind(this)\n        this.handleNewItemNameChanged = this.handleNewItemNameChanged.bind(this)\n        this.handleItemCheckbox = this.handleItemCheckbox.bind(this)\n        this.toggleEdit = this.toggleEdit.bind(this)\n        this.handleResetDateChanged = this.handleResetDateChanged.bind(this)\n        this.handleResetTimeChanged = this.handleResetTimeChanged.bind(this)\n    }\n\n    public handleNewItemNameChanged(event: any) {\n        this.setState({\n            newItemName: event.target.value\n        })\n    }\n\n    public handleCreateNewItem(event: any) {\n        event.preventDefault()\n\n        if (this.state.newItemName.trim() === \"\") {\n            this.setState({\n                newItemName: \"\"\n            })\n\n            return\n        }\n\n        this.props.addTodoItem(\n            this.props.list.id,\n            {\n                id: uuid.v1(),\n                createdAt: new Date(),\n                modifiedAt: new Date(),\n                itemText: this.state.newItemName,\n                isChecked: false,\n            }\n        )\n\n        this.setState({\n            newItemName: \"\",\n        })\n    }\n\n    public handleItemCheckbox(item: Item, checked: boolean) {\n        this.props.updateItem(this.props.list.id, {\n            ...item,\n            isChecked: checked,\n            modifiedAt: new Date(),\n        })\n    }\n\n    private handleResetPeriodChanged(event: React.ChangeEvent<HTMLInputElement>) {\n        const { value } = event.target as any\n\n        if (!value) {\n            return\n        }\n\n        const listId = this.props.list.id\n\n        const recurs: Recurs = {\n            ...this.props.list.recurs,\n            period: value,\n            length: 1,\n            startFrom: new Date(),\n            previouslyRecurred: null,\n        }\n\n        this.props.updateWhenListRecurs(listId, recurs)\n    }\n\n    private handleResetLengthChanged(event: any) {\n        const { value } = event.target\n\n        // TODO: Assert not less than 1\n        if (!value || value < 1) {\n            return\n        }\n\n        const listId = this.props.list.id\n\n        const recurs: Recurs = {\n            ...this.props.list.recurs,\n            length: event.target.value,\n            previouslyRecurred: null,\n        }\n\n        this.props.updateWhenListRecurs(listId, recurs)\n    }\n\n    private toggleEdit() {\n        this.setState((prevState) => {\n            return {\n                showModify: !prevState.showModify\n            }\n        })\n    }\n\n    private handleResetDateChanged(newDate: Date) {\n        const { startFrom } = this.props.list.recurs\n\n        const oldHours = startFrom.getHours()\n        const oldMinutes = startFrom.getMinutes()\n\n        const newStartFrom = setSeconds(setMinutes(setHours(newDate, oldHours), oldMinutes), 0)\n\n        const { id } = this.props.list\n\n        this.props.updateWhenListRecurs(id, {\n            ...this.props.list.recurs,\n            startFrom: newStartFrom,\n            previouslyRecurred: null,\n        })\n    }\n\n    private handleResetTimeChanged(newTime: Date) {\n        if (isFuture(newTime)) {\n            return\n        }\n\n        const { startFrom } = this.props.list.recurs\n\n        const newHours = newTime.getHours()\n        const newMinutes = newTime.getMinutes()\n\n        const newStartFrom = setSeconds(setMinutes(setHours(startFrom, newHours), newMinutes), 0)\n\n        const { id } = this.props.list\n        this.props.updateWhenListRecurs(id, {\n            ...this.props.list.recurs,\n            startFrom: newStartFrom,\n            previouslyRecurred: null,\n        })\n    }\n\n    public render() {\n\n        const listItems = this.props.list.items.sort((a, b) => {\n            return a.itemText.localeCompare(b.itemText)\n        })\n\n        const unCompletedItems = listItems.filter(item => item.isChecked === false)\n        const completedItems = listItems.filter(item => item.isChecked)\n\n        return (\n            <Fragment>\n                <TodoListHeader list={this.props.list} />\n\n                <div\n                    tabIndex={0}\n                    className=\"p-2 pl-3 bg-light border\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={this.toggleEdit}\n                    onKeyPress={this.toggleEdit}\n                >\n                    Edit\n                </div>\n\n                {this.state.showModify &&\n                    <div className=\"p-3 border border-top-0\">\n                        <Row>\n                            <Col lg={4}>\n                                <Label>Reset every</Label>\n                                <Input\n                                    type=\"number\"\n                                    min={1}\n                                    value={this.props.list.recurs.length}\n                                    onChange={(event) => {\n                                        this.handleResetLengthChanged(event)\n                                    }}\n                                />\n                            </Col>\n                            <Col lg={8} className=\"mt-2 mt-lg-0 d-flex align-items-end\">\n                                <CustomInput\n                                    type=\"select\"\n                                    id={`recurType-${this.props.list.id}`}\n                                    value={this.props.list.recurs.period}\n                                    onChange={(event) => {\n                                        this.handleResetPeriodChanged(event)\n                                    }}>\n                                    <option value=\"weeks\">Weeks</option>\n                                    <option value=\"days\">Days</option>\n                                    <option value=\"hours\">Hours</option>\n                                </CustomInput>\n                            </Col>\n\n                            <Fragment>\n                                <Col lg={6} className=\"mt-3 d-flex flex-column\">\n                                    <Label>Starting from</Label>\n\n                                    <ReactDatePicker\n                                        className=\"form-control\"\n                                        selected={this.props.list.recurs.startFrom}\n                                        maxDate={new Date()}\n                                        dateFormat={['yyyy-MM-dd', 'yyyyMMdd']}\n                                        strictParsing={true}\n                                        onChange={(date) => {\n                                            if (date === null) {\n                                                return\n                                            }\n\n                                            this.handleResetDateChanged(date)\n                                        }}\n                                    />\n\n                                </Col>\n                                <Col lg={6} className=\"mt-2 mt-lg-0 d-flex flex-column justify-content-end\">\n                                    <ReactDatePicker\n                                        className=\"form-control\"\n                                        selected={this.props.list.recurs.startFrom}\n                                        maxTime={new Date()}\n                                        minTime={startOfDay(new Date())}\n                                        timeCaption=\"Time\"\n                                        showTimeSelect={true}\n                                        showTimeSelectOnly={true}\n                                        timeIntervals={15}\n                                        timeFormat={'HH:mm'}\n                                        dateFormat={['HH:mm', 'HHmm']}\n                                        strictParsing={true}\n                                        onChange={(date) => {\n                                            if (date === null) {\n                                                return\n                                            }\n\n                                            this.handleResetTimeChanged(date)\n                                        }}\n                                    />\n                                </Col>\n                            </Fragment>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <div className=\"mt-3\">\n                                    <Label>Add new item</Label>\n                                    <Form className=\"d-flex\" onSubmit={this.handleCreateNewItem}>\n                                        <Input\n                                            type=\"text\"\n                                            value={this.state.newItemName}\n                                            onChange={this.handleNewItemNameChanged}\n                                            placeholder=\"Press enter to add\"\n                                        />\n                                    </Form>\n                                </div>\n                            </Col>\n                        </Row>\n                    </div>\n                }\n\n                <div className=\"mt-3\">\n                    {listItems.length === 0 && (\n                        <p>You have no items, create a new one!</p>\n                    )}\n\n                    <ul className=\"list-unstyled\">\n                        {unCompletedItems.map(item => {\n\n                            return (\n                                <li className=\"p-2 pl-3 mb-2 w-100 d-flex justify-content-between align-items-center border\" key={item.id}>\n                                    <div className=\"d-flex align-items-center\">\n                                        <CustomInput\n                                            id={`cb-${item.id}`}\n                                            type=\"checkbox\"\n                                            checked={item.isChecked}\n                                            label={item.itemText}\n                                            onChange={() => {\n                                                this.handleItemCheckbox(item, !item.isChecked)\n                                            }}\n                                        />\n                                    </div>\n\n                                    <Button\n                                        size=\"sm\"\n                                        color=\"link\"\n                                        onClick={() => this.props.deleteItem(this.props.list.id, item.id)}>\n                                        Delete\n                                    </Button>\n                                </li>\n                            )\n\n                        })}\n                    </ul>\n\n                    {completedItems.length > 0 &&\n                        <Fragment>\n                            <hr />\n\n                            <ul className=\"mt-3 list-unstyled\">\n                                {completedItems.map(item => {\n\n                                    return (\n                                        <li className=\"p-2 pl-3 mb-2 w-100 d-flex justify-content-between align-items-center border\" key={item.id}>\n                                            <div className=\"d-flex align-items-center\">\n                                                <CustomInput\n                                                    id={`cb-${item.id}`}\n                                                    type=\"checkbox\"\n                                                    checked={item.isChecked}\n                                                    label={item.itemText}\n                                                    onChange={() => {\n                                                        this.handleItemCheckbox(item, !item.isChecked)\n                                                    }}\n                                                />\n                                            </div>\n\n                                            <Button\n                                                size=\"sm\"\n                                                color=\"link\"\n                                                onClick={() => this.props.deleteItem(this.props.list.id, item.id)}>\n                                                Delete\n                                            </Button>\n                                        </li>\n                                    )\n\n                                })}\n                            </ul>\n                        </Fragment>\n                    }\n                </div>\n            </Fragment >\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispToProps)(TodoList)\n","import React, { Dispatch, Fragment } from \"react\";\nimport { List } from \"../model/models\";\nimport { ListGroup, ListGroupItem, Button } from \"reactstrap\";\nimport { ActionType } from \"typesafe-actions\";\nimport { AppActions } from \"../redux/actions\";\nimport { connect } from \"react-redux\";\nimport { format } from 'timeago.js';\nimport { addMilliseconds, lightFormat } from \"date-fns\";\nimport { calculateRecurs } from \"../util/recur-engine\";\n\nfunction mapDispToProps(disp: Dispatch<ActionType<typeof AppActions>>) {\n    return {\n        createNewList: () =>\n            disp(AppActions.createNewList()),\n\n        changeActiveList: (listId: string) =>\n            disp(AppActions.changeActiveList({ listId }))\n    }\n}\n\ntype Props = ReturnType<typeof mapDispToProps>\n    & {\n        activeListId: string,\n        lists: List[]\n    }\n\nconst TimeUntil: React.FC<{ list: List }> = props => {\n    const resetDateTime = lightFormat(addMilliseconds(new Date(), calculateRecurs(props.list.recurs).timeUntilRecurs), \"yyyy-MM-dd HH:mm\")\n    const resetsIn = format(addMilliseconds(new Date(), calculateRecurs(props.list.recurs).timeUntilRecurs))\n\n    return (\n        <small title={resetDateTime}>\n            Resets {resetsIn}\n        </small>\n    )\n}\n\nconst ListItemContent: React.FC<{ list: List }> = props => {\n    const itemProgress = `${props.list.items.filter(item => item.isChecked).length + \" of \" + props.list.items.length} completed`\n\n    return (\n        <div className=\"d-flex justify-content-between align-items-center\">\n            <div className=\"d-flex flex-column w-100\">\n                <div className=\"mb-1 font-weight-bold\">\n                    {props.list.listName}\n                </div>\n                <div className=\"d-flex justify-content-between w-100\">\n                    <div className=\"small\">\n                        {itemProgress}\n                    </div>\n                    <TimeUntil list={props.list} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nclass ListOfTodoLists extends React.Component<Props> {\n\n    public constructor(props: Props) {\n        super(props)\n\n        this.handleChangeActiveList = this.handleChangeActiveList.bind(this)\n    }\n\n    private handleChangeActiveList(listId: string) {\n        if (listId === this.props.activeListId) {\n            return\n        }\n\n        this.props.changeActiveList(listId)\n    }\n\n    public render() {\n        const lists = this.props.lists.sort((a, b) => {\n            const aRecurs = calculateRecurs(a.recurs).timeUntilRecurs\n            const bRecurs = calculateRecurs(b.recurs).timeUntilRecurs\n\n            if (aRecurs === bRecurs) {\n                return a.listName.localeCompare(b.listName)\n            }\n\n            return aRecurs - bRecurs\n        })\n\n        const completedLists = lists.filter(list => {\n            return list.items.length > 0 && list.items.filter(item => item.isChecked).length === list.items.length\n        })\n\n        const nonEmptyNonCompletedLists = lists.filter(list => {\n            return list.items.length > 0 && list.items.filter(item => item.isChecked).length !== list.items.length\n        })\n\n        const emptyLists = lists.filter(list => {\n            return list.items.length === 0\n        })\n\n        return (\n            <Fragment>\n                <div className=\"border\">\n\n                    <div className=\"px-3 pt-3 mb-3 d-flex justify-content-between align-items-center\">\n                        <h3 className=\"m-0\">Lists</h3>\n                        <Button size=\"sm\" onClick={this.props.createNewList}>New</Button>\n                    </div>\n\n                    <ListGroup flush={true}>\n                        {nonEmptyNonCompletedLists.map(list => {\n                            const isActive = list.id === this.props.activeListId\n\n                            return (\n                                <ListGroupItem\n                                    key={list.id}\n                                    tag=\"button\"\n                                    action\n                                    active={isActive}\n                                    onClick={() => this.handleChangeActiveList(list.id)}>\n\n                                    <ListItemContent list={list} />\n                                </ListGroupItem>\n                            )\n                        })}\n                    </ListGroup>\n\n                </div>\n\n                {completedLists.length > 0 &&\n                    <div>\n                        <h6 className=\"mt-4\">Completed</h6>\n                        <div className=\"border\">\n                            <ListGroup flush={true}>\n                                {completedLists.map(list => {\n                                    const isActive = list.id === this.props.activeListId\n\n                                    return (\n                                        <ListGroupItem\n                                            color=\"success\"\n                                            key={list.id}\n                                            tag=\"button\"\n                                            action\n                                            active={isActive}\n                                            onClick={() => this.handleChangeActiveList(list.id)}>\n\n                                            <ListItemContent list={list} />\n                                        </ListGroupItem>\n                                    )\n                                })}\n                            </ListGroup>\n                        </div>\n                    </div>\n                }\n\n                {emptyLists.length > 0 &&\n                    <div>\n                        <h6 className=\"mt-4\">Empty</h6>\n                        <div className=\"border\">\n                            <ListGroup flush={true}>\n                                {emptyLists.map(list => {\n                                    const isActive = list.id === this.props.activeListId\n\n                                    return (\n                                        <ListGroupItem\n                                            key={list.id}\n                                            tag=\"button\"\n                                            action\n                                            active={isActive}\n                                            onClick={() => this.handleChangeActiveList(list.id)}>\n\n                                            <ListItemContent list={list} />\n                                        </ListGroupItem>\n                                    )\n                                })}\n                            </ListGroup>\n                        </div>\n                    </div>\n                }\n            </Fragment>\n\n        )\n    }\n}\n\nexport default connect(null, mapDispToProps)(ListOfTodoLists)\n","import React from 'react';\nimport { Row, Col, Container } from 'reactstrap';\nimport { List } from './model/models';\nimport { connect } from 'react-redux';\nimport { RootState } from './redux/store';\nimport TodoList from './component/TodoList';\nimport ListOfTodoLists from './component/ListOfTodoLists';\nimport packageJson from '../package.json';\n\ninterface Props {\n    activeList: List\n    lists: List[]\n}\n\nfunction mapStateToProps(state: RootState) {\n    return {\n        activeList: state.lists.filter(list => list.id === state.activeListId)[0],\n        lists: state.lists\n    }\n}\n\nclass App extends React.Component<Props> {\n\n    render() {\n        return (\n            <div className=\"h-100 d-flex flex-column justify-content-between\" >\n                <Container className=\"mt-3 flex-grow-1\">\n                    <Row>\n                        <Col lg={7}>\n\n                            <TodoList list={this.props.activeList} />\n\n                        </Col>\n                        <Col lg={5} className=\"mb-4 order-first\">\n\n                            <ListOfTodoLists activeListId={this.props.activeList.id}\n                                lists={this.props.lists} />\n\n                        </Col>\n                    </Row>\n                </Container>\n                <Container>\n                    <div className=\"mb-3 d-flex flex-shrink-0 justify-content-center justify-content-lg-start\">\n                        <div style={{ color: \"#c3c3c3\", fontSize: \"9px\" }}>\n                            v{packageJson.version}\n                        </div>\n                    </div>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { composeWithDevTools } from 'redux-devtools-extension'\nimport { createStore } from \"redux\";\nimport { List } from \"../model/models\";\nimport { AppActions, AppReducers } from \"./actions\";\nimport { ActionType, getType } from \"typesafe-actions\";\nimport * as uuid from 'uuid'\nimport { saveToLocalStorage, loadFromLocalStorage } from './local-storage';\n\nexport interface RootState {\n    activeListId: string,\n    lists: List[]\n}\n\nfunction createEmptyList(): List {\n    const startFrom = new Date()\n\n    return {\n        id: uuid.v1(),\n        createdAt: new Date(),\n        modifiedAt: new Date(),\n        listName: `untitled list`,\n        items: [],\n        recurs: {\n            period: \"weeks\",\n            length: 1,\n            startFrom,\n            previouslyRecurred: null,\n        }\n    }\n}\n\nlet firstListUuid = uuid.v1()\n\nconst initState = (): RootState => {\n    const startFrom = new Date()\n\n    return {\n        activeListId: firstListUuid,\n        lists: [{\n            id: firstListUuid,\n            createdAt: new Date(),\n            modifiedAt: new Date(),\n            listName: `untitled list`,\n            items: [],\n            recurs: {\n                period: \"weeks\",\n                length: 1,\n                startFrom,\n                previouslyRecurred: null,\n            }\n        }]\n    }\n}\n\nfunction rootReducer(\n    state: RootState = initState(),\n    action: ActionType<typeof AppActions>\n): RootState {\n\n    switch (action.type) {\n\n        case (getType(AppActions.resetRecuringItems)): {\n            return AppReducers.resetRecuringItems(state, action)\n        }\n\n        case (getType(AppActions.updateWhenListRecurs)): {\n            const list: List = {\n                ...state.lists.filter(list => list.id === action.payload.listId)[0],\n                modifiedAt: new Date(),\n                recurs: action.payload.recurs\n            }\n\n            return {\n                ...state,\n                lists: [\n                    ...state.lists.filter(list => list.id !== action.payload.listId),\n                    list\n                ]\n            }\n        }\n\n        case (getType(AppActions.changeActiveList)): {\n            return {\n                ...state,\n                activeListId: action.payload.listId,\n            }\n        }\n\n        case (getType(AppActions.deleteList)): {\n            const prunedListsList = state.lists.filter(list => list.id !== action.payload.listId)\n            const listIndex = state.lists.findIndex(list => list.id === action.payload.listId)\n\n            let nextIndex = prunedListsList.length - 1\n\n            if (listIndex <= nextIndex) {\n                nextIndex = listIndex\n            }\n\n            return {\n                ...state,\n                lists: prunedListsList,\n                activeListId: prunedListsList[nextIndex].id\n            }\n        }\n\n        case (getType(AppActions.copyList)): {\n\n            const listToCopy = state.lists.find(list => list.id === action.payload.listId) as List\n\n            const newList: List = createEmptyList()\n            newList.listName = \"Copy of \".concat(listToCopy.listName)\n\n            newList.recurs = {\n                ...listToCopy.recurs\n            }\n\n            newList.items = [\n                ...listToCopy.items\n            ]\n\n            return {\n                ...state,\n                lists: [\n                    ...state.lists,\n                    newList,\n                ]\n            }\n        }\n\n        case (getType(AppActions.createNewList)): {\n\n            const newList = createEmptyList()\n\n            return {\n                ...state,\n                lists: [\n                    ...state.lists,\n                    newList\n                ],\n                activeListId: newList.id,\n            }\n        }\n\n        case (getType(AppActions.addTodoItem)): {\n\n            const list = state.lists.filter(list => list.id === action.payload.listId)[0]\n            list.items.push(action.payload.item)\n\n            return {\n                ...state,\n                lists: [\n                    ...state.lists.filter(list => list.id !== action.payload.listId),\n                    {\n                        ...list,\n                        items: [\n                            ...list.items\n                        ]\n                    }\n                ]\n            }\n        }\n\n        case (getType(AppActions.deleteItem)): {\n            const list = state.lists.filter(list => list.id === action.payload.listId)[0]\n\n            return {\n                ...state,\n                lists: [\n                    ...state.lists.filter(list => list.id !== action.payload.listId),\n                    {\n                        ...list,\n                        items: [\n                            ...list.items.filter(item => item.id !== action.payload.itemId)\n                        ]\n                    }\n                ]\n            }\n        }\n\n        case (getType(AppActions.updateItem)): {\n\n            const list = state.lists.filter(list => list.id === action.payload.listId)[0]\n            const updatedItem = action.payload.item\n\n            return {\n                ...state,\n                lists: [\n                    ...state.lists.filter(list => list.id !== action.payload.listId),\n                    {\n                        ...list,\n                        items: [\n                            ...list.items.filter(item => item.id !== updatedItem.id),\n                            updatedItem,\n                        ]\n                    }\n                ]\n            }\n\n        }\n\n        case (getType(AppActions.renameList)): {\n\n            const listToUpdate = state.lists.filter(list => list.id === action.payload.listId)[0]\n\n            return {\n                ...state,\n                lists: [\n                    ...state.lists.filter(list => list.id !== action.payload.listId),\n                    {\n                        ...listToUpdate,\n                        listName: action.payload.name,\n                    }\n                ]\n            }\n\n        }\n\n    }\n\n    return state\n}\n\nconst reduxDevTools = composeWithDevTools({\n    actionsBlacklist: '@HIDDEN/resetRecuringItems'\n})\n\nexport const store = createStore(\n    rootReducer,\n    loadFromLocalStorage(),\n    reduxDevTools()\n)\n\nstore.subscribe(() => {\n    saveToLocalStorage(store.getState())\n})\n","import { RootState } from \"./store\";\n\nexport function saveToLocalStorage(state: RootState) {\n    const jsonState = JSON.stringify(state)\n    window.localStorage.setItem('state', jsonState)\n}\n\nexport function loadFromLocalStorage(): RootState | undefined {\n\n    try {\n\n        const jsonState = window.localStorage.getItem('state')\n\n        if (jsonState == null) {\n            return undefined\n        }\n\n        // https://stackoverflow.com/a/24660721/1891491\n        return JSON.parse(jsonState, function (name, value) {\n            if (typeof value === \"string\" && /^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d.\\d\\d\\dZ$/.test(value)) {\n                return new Date(value);\n            }\n            return value;\n        })\n\n    } catch (error) {\n        console.error(error);\n        return undefined\n    }\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './css/index.scss';\nimport 'react-datepicker/dist/react-datepicker.css'\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport { AppActions } from './redux/actions';\n\nstore.dispatch(AppActions.resetRecuringItems())\n\nsetInterval(() => {\n    store.dispatch(AppActions.resetRecuringItems())\n}, 1000)\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}