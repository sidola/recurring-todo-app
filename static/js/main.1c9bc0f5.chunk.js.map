{"version":3,"sources":["redux/actions.ts","component/TodoList.tsx","util/recur-engine.ts","component/ListOfTodoLists.tsx","App.tsx","serviceWorker.ts","redux/store.ts","redux/local-storage.ts","index.tsx"],"names":["AppActions","resetRecuringItems","createAction","addTodoItem","action","p","updateItem","deleteItem","renameList","updateWhenListRecurs","a","createNewList","deleteList","changeActiveList","TodoList","props","state","newItemName","renamingList","newListName","showModify","handleCreateNewItem","bind","handleNewItemNameChanged","handleItemCheckbox","handleRenameListInput","toggleEdit","handleResetDateChanged","handleResetTimeChanged","event","this","setState","target","value","preventDefault","trim","list","id","uuid","createdAt","Date","modifiedAt","itemText","isChecked","item","checked","listName","listId","recurs","period","startFrom","length","prevState","newDate","oldHours","getHours","oldMinutes","getMinutes","newStartFrom","setSeconds","setMinutes","setHours","newTime","isFuture","newHours","newMinutes","listItems","items","sort","b","localeCompare","unCompletedItems","filter","completedItems","className","style","cursor","onClick","beginRenameList","Button","disabled","disableDelete","size","Input","autoFocus","onChange","onKeyDown","key","endRenameList","onBlur","tabIndex","onKeyPress","Row","Col","lg","Label","type","min","handleResetLengthChanged","CustomInput","handleResetPeriodChanged","selected","maxDate","dateFormat","strictParsing","date","maxTime","minTime","startOfDay","timeCaption","showTimeSelect","showTimeSelectOnly","timeIntervals","timeFormat","Form","onSubmit","placeholder","map","label","color","React","Component","connect","lists","disp","itemId","name","calculateRecurs","now","nowDate","periodLengthMs","Error","getPeriodLengthAsMilli","periodStartDate","previouslyRecurred","nextRecurDate","addMilliseconds","isAfter","hasRecurred","previousRecurredDate","timeUntilRecurs","differenceInMilliseconds","possiblyTheFuture","TimeUntil","resetDateTime","lightFormat","resetsIn","format","title","ListItemContent","itemProgress","ListOfTodoLists","handleChangeActiveList","activeListId","aRecurs","bRecurs","completedLists","unCompletedLists","ListGroup","flush","isActive","ListGroupItem","tag","active","App","Container","activeList","Boolean","window","location","hostname","match","firstListUuid","initState","store","createStore","getType","newLists","recursCalc","updateList","payload","prunedListsList","listIndex","findIndex","nextIndex","newList","createEmptyList","push","updatedItem","listToUpdate","jsonState","localStorage","getItem","JSON","parse","test","error","console","loadFromLocalStorage","composeWithDevTools","subscribe","stringify","setItem","saveToLocalStorage","getState","setInterval","dispatch","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c9bc0f5.chunk.js","sourcesContent":["import { createAction } from \"typesafe-actions\";\nimport { Item, Recurs } from \"../model/models\";\n\nexport const AppActions = {\n\n    resetRecuringItems: createAction('resetRecuringItems'),\n\n    addTodoItem: createAction('addTodoItem', action => {\n        return (p: { listId: string, item: Item }) => action(p)\n    }),\n\n    updateItem: createAction('updateItem', action => {\n        return (p: { listId: string, item: Item }) => action(p)\n    }),\n\n    deleteItem: createAction('deleteItem', action => {\n        return (p: { listId: string, itemId: string }) => action(p)\n    }),\n\n    renameList: createAction('renameList', action => {\n        return (p: { listId: string, name: string }) => action(p)\n    }),\n\n    updateWhenListRecurs: createAction('updateWhenListRecurs', a => {\n        return (p: { listId: string, recurs: Recurs }) => a(p)\n    }),\n\n    createNewList: createAction('createNewList'),\n\n    deleteList: createAction('deleteList', action => {\n        return (p: { listId: string }) => action(p)\n    }),\n\n    changeActiveList: createAction('changeActiveList', action => {\n        return (p: { listId: string }) => action(p)\n    }),\n\n}\n","import React, { Fragment, Dispatch } from \"react\";\nimport { List, Item, Recurs } from \"../model/models\";\nimport { Input, CustomInput, Label, Button, Form, Row, Col } from \"reactstrap\";\nimport { ActionType } from \"typesafe-actions\";\nimport { AppActions } from \"../redux/actions\";\nimport { connect } from \"react-redux\";\nimport * as uuid from \"uuid\"\nimport { State } from \"../redux/store\";\nimport { setHours, setMinutes, isFuture, startOfDay, setSeconds } from \"date-fns\";\nimport ReactDatePicker from \"react-datepicker\";\n\nfunction mapStateToProps(state: State) {\n    return {\n        // Cannot delete last list\n        disableDelete: state.lists.length === 1\n    }\n}\n\nfunction mapDispToProps(disp: Dispatch<ActionType<typeof AppActions>>) {\n    return {\n        addTodoItem: (listId: string, item: Item) =>\n            disp(AppActions.addTodoItem({ listId, item })),\n\n        updateItem: (listId: string, item: Item) =>\n            disp(AppActions.updateItem({ listId, item })),\n\n        deleteItem: (listId: string, itemId: string) =>\n            disp(AppActions.deleteItem({ listId, itemId })),\n\n        renameList: (listId: string, name: string) =>\n            disp(AppActions.renameList({ listId, name })),\n\n        deleteList: (listId: string) =>\n            disp(AppActions.deleteList({ listId })),\n\n        updateWhenListRecurs: (listId: string, recurs: Recurs) =>\n            disp(AppActions.updateWhenListRecurs({ listId, recurs }))\n    }\n}\n\ntype Props = ReturnType<typeof mapDispToProps>\n    & ReturnType<typeof mapStateToProps>\n    & { list: List }\n\nclass TodoList extends React.Component<Props, {\n    newItemName: string,\n    renamingList: boolean,\n    newListName: string,\n    showModify: boolean,\n}> {\n\n    readonly state = {\n        newItemName: \"\",\n        renamingList: false,\n        newListName: \"\",\n        showModify: false,\n    }\n\n    public constructor(props: Props) {\n        super(props)\n\n        this.handleCreateNewItem = this.handleCreateNewItem.bind(this)\n        this.handleNewItemNameChanged = this.handleNewItemNameChanged.bind(this)\n        this.handleItemCheckbox = this.handleItemCheckbox.bind(this)\n        this.handleRenameListInput = this.handleRenameListInput.bind(this)\n        this.toggleEdit = this.toggleEdit.bind(this)\n        this.handleResetDateChanged = this.handleResetDateChanged.bind(this)\n        this.handleResetTimeChanged = this.handleResetTimeChanged.bind(this)\n    }\n\n    public handleRenameListInput(event: any) {\n        this.setState({\n            newListName: event.target.value\n        })\n    }\n\n\n    public handleNewItemNameChanged(event: any) {\n        this.setState({\n            newItemName: event.target.value\n        })\n    }\n\n    public handleCreateNewItem(event: any) {\n        event.preventDefault()\n\n        if (this.state.newItemName.trim() === \"\") {\n            this.setState({\n                newItemName: \"\"\n            })\n\n            return\n        }\n\n        this.props.addTodoItem(\n            this.props.list.id,\n            {\n                id: uuid.v1(),\n                createdAt: new Date(),\n                modifiedAt: new Date(),\n                itemText: this.state.newItemName,\n                isChecked: false,\n            }\n        )\n\n        this.setState({\n            newItemName: \"\",\n        })\n    }\n\n    public handleItemCheckbox(item: Item, checked: boolean) {\n        this.props.updateItem(this.props.list.id, {\n            ...item,\n            isChecked: checked,\n            modifiedAt: new Date(),\n        })\n    }\n\n    private beginRenameList() {\n        this.setState({\n            newListName: this.props.list.listName,\n            renamingList: true,\n        })\n    }\n\n    private endRenameList() {\n        if (this.state.newListName.trim() !== \"\") {\n            this.props.renameList(this.props.list.id, this.state.newListName)\n        }\n\n        this.setState({\n            newListName: \"\",\n            renamingList: false,\n        })\n    }\n\n    private handleResetPeriodChanged(event: React.ChangeEvent<HTMLInputElement>) {\n        const { value } = event.target as any\n\n        if (!value) {\n            return\n        }\n\n        const listId = this.props.list.id\n\n        const recurs: Recurs = {\n            ...this.props.list.recurs,\n            period: value,\n            startFrom: new Date(),\n            length: 1,\n        }\n\n        this.props.updateWhenListRecurs(listId, recurs)\n    }\n\n    private handleResetLengthChanged(event: any) {\n        const { value } = event.target\n\n        // TODO: Assert not less than 1\n        if (!value || value < 1) {\n            return\n        }\n\n        const listId = this.props.list.id\n\n        const recurs: Recurs = {\n            ...this.props.list.recurs,\n            length: event.target.value,\n        }\n\n        this.props.updateWhenListRecurs(listId, recurs)\n    }\n\n\n    private toggleEdit() {\n        this.setState((prevState) => {\n            return {\n                showModify: !prevState.showModify\n            }\n        })\n    }\n\n    private handleResetDateChanged(newDate: Date) {\n        const { startFrom } = this.props.list.recurs\n\n        const oldHours = startFrom.getHours()\n        const oldMinutes = startFrom.getMinutes()\n\n        const newStartFrom = setSeconds(setMinutes(setHours(newDate, oldHours), oldMinutes), 0)\n\n        const { id } = this.props.list\n        this.props.updateWhenListRecurs(id, {\n            ...this.props.list.recurs,\n            startFrom: newStartFrom\n        })\n    }\n\n    private handleResetTimeChanged(newTime: Date) {\n        if (isFuture(newTime)) {\n            return\n        }\n\n        const { startFrom } = this.props.list.recurs\n\n        const newHours = newTime.getHours()\n        const newMinutes = newTime.getMinutes()\n\n        const newStartFrom = setSeconds(setMinutes(setHours(startFrom, newHours), newMinutes), 0)\n\n        const { id } = this.props.list\n        this.props.updateWhenListRecurs(id, {\n            ...this.props.list.recurs,\n            startFrom: newStartFrom\n        })\n    }\n\n    public render() {\n\n        const listItems = this.props.list.items.sort((a, b) => {\n            return a.itemText.localeCompare(b.itemText)\n        })\n\n        const unCompletedItems = listItems.filter(item => item.isChecked === false)\n        const completedItems = listItems.filter(item => item.isChecked)\n\n        return (\n            <Fragment>\n\n                {this.state.renamingList === false &&\n                    <div className=\"mb-4 d-flex align-items-center\">\n                        <h2 className=\"w-100\" style={{\n                            cursor: \"pointer\"\n                        }} onClick={() => {\n                            this.beginRenameList()\n                        }}>\n                            {this.props.list.listName}\n                        </h2>\n\n                        <Button\n                            disabled={this.props.disableDelete}\n                            size=\"sm\"\n                            onClick={() => {\n                                this.props.deleteList(this.props.list.id)\n                            }}>\n                            Delete\n                        </Button>\n                    </div>\n                }\n\n                {this.state.renamingList &&\n                    <div className=\"mb-4 d-flex flex-column\">\n                        {/* <p className=\"mb-2\">Renaming list</p> */}\n                        <Input\n                            autoFocus={true}\n                            value={this.state.newListName}\n                            onChange={this.handleRenameListInput}\n                            onKeyDown={(event: React.KeyboardEvent<HTMLInputElement>) => {\n                                if (event.key === \"Enter\") {\n                                    this.endRenameList()\n                                }\n                            }}\n                            onBlur={() => {\n                                this.endRenameList()\n                            }}\n                        />\n                    </div>\n                }\n\n                <div\n                    tabIndex={0}\n                    className=\"p-2 pl-3 bg-light border\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={this.toggleEdit}\n                    onKeyPress={this.toggleEdit}\n                >\n                    Edit\n                </div>\n\n                {this.state.showModify &&\n                    <div className=\"p-3 border border-top-0\">\n                        <Row>\n                            <Col lg={4} className=\"mt-3 mt-lg-0\">\n                                <Label>Reset every</Label>\n                                <Input\n                                    type=\"number\"\n                                    min={1}\n                                    value={this.props.list.recurs.length}\n                                    onChange={(event) => {\n                                        this.handleResetLengthChanged(event)\n                                    }}\n                                />\n                            </Col>\n                            <Col lg={8} className=\"mt-2 mt-lg-0 d-flex align-items-end\">\n                                <CustomInput\n                                    type=\"select\"\n                                    id={`recurType-${this.props.list.id}`}\n                                    value={this.props.list.recurs.period}\n                                    onChange={(event) => {\n                                        this.handleResetPeriodChanged(event)\n                                    }}>\n                                    <option value=\"weeks\">Weeks</option>\n                                    <option value=\"days\">Days</option>\n                                    <option value=\"hours\">Hours</option>\n                                </CustomInput>\n                            </Col>\n\n                            <Fragment>\n                                <Col lg={6} className=\"mt-3 d-flex flex-column\">\n                                    <Label>Start date</Label>\n\n                                    <ReactDatePicker\n                                        className=\"form-control\"\n                                        selected={this.props.list.recurs.startFrom}\n                                        maxDate={new Date()}\n                                        dateFormat={['yyyy-MM-dd', 'yyyyMMdd']}\n                                        strictParsing={true}\n                                        onChange={(date) => {\n                                            if (date === null) {\n                                                return\n                                            }\n\n                                            this.handleResetDateChanged(date)\n                                        }}\n                                    />\n\n                                </Col>\n                                <Col lg={6} className=\"mt-3 d-flex flex-column\">\n                                    <Label>Start time</Label>\n\n                                    <ReactDatePicker\n                                        className=\"form-control\"\n                                        selected={this.props.list.recurs.startFrom}\n                                        maxTime={new Date()}\n                                        minTime={startOfDay(new Date())}\n                                        timeCaption=\"Time\"\n                                        showTimeSelect={true}\n                                        showTimeSelectOnly={true}\n                                        timeIntervals={15}\n                                        timeFormat={'HH:mm'}\n                                        dateFormat={['HH:mm', 'HHmm']}\n                                        strictParsing={true}\n                                        onChange={(date) => {\n                                            if (date === null) {\n                                                return\n                                            }\n\n                                            this.handleResetTimeChanged(date)\n                                        }}\n                                    />\n                                </Col>\n                            </Fragment>\n                        </Row>\n                    </div>\n                }\n\n                <div className=\"mt-3\">\n                    <Form className=\"d-flex\" onSubmit={this.handleCreateNewItem}>\n                        <Input\n                            type=\"text\"\n                            value={this.state.newItemName}\n                            onChange={this.handleNewItemNameChanged}\n                            placeholder={\"Add new item...\"}\n                        />\n                    </Form>\n                </div>\n\n                <div className=\"mt-3\">\n                    {listItems.length === 0 && (\n                        <p>You have no items, create a new one!</p>\n                    )}\n\n                    <ul className=\"list-unstyled\">\n                        {unCompletedItems.map(item => {\n\n                            return (\n                                <li className=\"p-2 pl-3 mb-2 w-100 d-flex justify-content-between align-items-center border\" key={item.id}>\n                                    <div className=\"d-flex align-items-center\">\n                                        <CustomInput\n                                            id={`cb-${item.id}`}\n                                            type=\"checkbox\"\n                                            checked={item.isChecked}\n                                            label={item.itemText}\n                                            onChange={() => {\n                                                this.handleItemCheckbox(item, !item.isChecked)\n                                            }}\n                                        />\n                                    </div>\n\n                                    <Button\n                                        size=\"sm\"\n                                        color=\"link\"\n                                        onClick={() => this.props.deleteItem(this.props.list.id, item.id)}>\n                                        Delete\n                                    </Button>\n                                </li>\n                            )\n\n                        })}\n                    </ul>\n\n                    {completedItems.length > 0 &&\n                        <Fragment>\n                            <hr />\n\n                            <ul className=\"mt-3 list-unstyled\">\n                                {completedItems.map(item => {\n\n                                    return (\n                                        <li className=\"p-2 pl-3 mb-2 w-100 d-flex justify-content-between align-items-center border\" key={item.id}>\n                                            <div className=\"d-flex align-items-center\">\n                                                <CustomInput\n                                                    id={`cb-${item.id}`}\n                                                    type=\"checkbox\"\n                                                    checked={item.isChecked}\n                                                    label={item.itemText}\n                                                    onChange={() => {\n                                                        this.handleItemCheckbox(item, !item.isChecked)\n                                                    }}\n                                                />\n                                            </div>\n\n                                            <Button\n                                                size=\"sm\"\n                                                color=\"link\"\n                                                onClick={() => this.props.deleteItem(this.props.list.id, item.id)}>\n                                                Delete\n                                    </Button>\n                                        </li>\n                                    )\n\n                                })}\n                            </ul>\n                        </Fragment>\n                    }\n                </div>\n            </Fragment >\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispToProps)(TodoList)\n","import { Recurs, List } from \"../model/models\";\nimport { differenceInMilliseconds, addMilliseconds, isAfter } from \"date-fns\";\n\nfunction getPeriodLengthAsMilli(recurs: Recurs) {\n    const HOUR_AS_MILLI = 3600000\n\n    switch (recurs.period) {\n        case \"weeks\": {\n            return (recurs.length * 24 * 7) * HOUR_AS_MILLI\n        }\n\n        case \"days\": {\n            return (recurs.length * 24) * HOUR_AS_MILLI\n        }\n\n        case \"hours\": {\n            return recurs.length * HOUR_AS_MILLI\n        }\n\n        default: {\n            throw new Error(`Unhandled recurs period: ${recurs.period}`)\n        }\n    }\n}\n\nexport function calculateRecurs(recurs: Recurs, now?: Date): {\n    hasRecurred: boolean,\n    previousRecurredDate: Date,\n    timeUntilRecurs: number,\n} {\n\n    const nowDate: Date = (now ? now : new Date())\n    const periodLengthMs = getPeriodLengthAsMilli(recurs)\n\n    const periodStartDate: Date = (recurs.previouslyRecurred)\n        ? recurs.previouslyRecurred\n        : recurs.startFrom\n\n    const nextRecurDate = addMilliseconds(periodStartDate, periodLengthMs)\n\n    if (isAfter(nextRecurDate, nowDate)) {\n        return {\n            hasRecurred: false,\n            previousRecurredDate: periodStartDate,\n            timeUntilRecurs: differenceInMilliseconds(nextRecurDate, nowDate),\n        }\n    }\n\n    // At this point, we know we have recurred, what we need to do now\n    // is figure out if we've skipped intervals and calculate the correct\n    // value for previousRecurredDate\n    let previousRecurredDate = nextRecurDate\n\n    while (true) {\n        const possiblyTheFuture = addMilliseconds(previousRecurredDate, periodLengthMs)\n\n        // This means the next occurrance will happen in the future\n        // So the current previousRecurredDate is the correct one\n        if (isAfter(possiblyTheFuture, nowDate)) {\n            break\n        }\n\n        // If it wasn't in the future, it's safe to increment our\n        // date with one more period\n        previousRecurredDate = addMilliseconds(previousRecurredDate, periodLengthMs)\n    }\n\n    return {\n        hasRecurred: true,\n        previousRecurredDate: previousRecurredDate,\n        timeUntilRecurs: differenceInMilliseconds(nextRecurDate, nowDate),\n    }\n}\n\nexport function updateList(list: List) {\n    const recursCalc = calculateRecurs(list.recurs)\n\n    if (recursCalc.hasRecurred === false) {\n        return list\n    }\n\n    const updatedList: List = {\n        ...list,\n        recurs: {\n            ...list.recurs,\n            previouslyRecurred: recursCalc.previousRecurredDate,\n        },\n        modifiedAt: new Date(),\n        items: list.items.map(item => {\n            return {\n                ...item,\n                isChecked: false,\n                modifiedAt: new Date()\n            }\n        })\n    }\n\n    return updatedList\n}\n","import React, { Dispatch, Fragment } from \"react\";\nimport { List } from \"../model/models\";\nimport { ListGroup, ListGroupItem, Button } from \"reactstrap\";\nimport { ActionType } from \"typesafe-actions\";\nimport { AppActions } from \"../redux/actions\";\nimport { connect } from \"react-redux\";\nimport { format } from 'timeago.js';\nimport { addMilliseconds, lightFormat } from \"date-fns\";\nimport { calculateRecurs } from \"../util/recur-engine\";\n\nfunction mapDispToProps(disp: Dispatch<ActionType<typeof AppActions>>) {\n    return {\n        createNewList: () =>\n            disp(AppActions.createNewList()),\n\n        changeActiveList: (listId: string) =>\n            disp(AppActions.changeActiveList({ listId }))\n    }\n}\n\ntype Props = ReturnType<typeof mapDispToProps>\n    & {\n        activeListId: string,\n        lists: List[]\n    }\n\nconst TimeUntil: React.FC<{ list: List }> = props => {\n    const resetDateTime = lightFormat(addMilliseconds(new Date(), calculateRecurs(props.list.recurs).timeUntilRecurs), \"yyyy-MM-dd HH:mm\")\n    const resetsIn = format(addMilliseconds(new Date(), calculateRecurs(props.list.recurs).timeUntilRecurs))\n\n    return (\n        <small title={resetDateTime}>\n            Resets {resetsIn}\n        </small>\n    )\n}\n\nconst ListItemContent: React.FC<{ list: List }> = props => {\n    const itemProgress = `${props.list.items.filter(item => item.isChecked).length + \" of \" + props.list.items.length} completed`\n\n    return (\n        <div className=\"d-flex justify-content-between align-items-center\">\n            <div className=\"d-flex flex-column w-100\">\n                <div className=\"mb-1 font-weight-bold\">\n                    {props.list.listName}\n                </div>\n                <div className=\"d-flex justify-content-between w-100\">\n                    <div className=\"small\">\n                        {itemProgress}\n                    </div>\n                    <TimeUntil list={props.list} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nclass ListOfTodoLists extends React.Component<Props> {\n\n    public constructor(props: Props) {\n        super(props)\n\n        this.handleChangeActiveList = this.handleChangeActiveList.bind(this)\n    }\n\n    private handleChangeActiveList(listId: string) {\n        if (listId === this.props.activeListId) {\n            return\n        }\n\n        this.props.changeActiveList(listId)\n    }\n\n    public render() {\n        const lists = this.props.lists.sort((a, b) => {\n            const aRecurs = calculateRecurs(a.recurs).timeUntilRecurs\n            const bRecurs = calculateRecurs(b.recurs).timeUntilRecurs\n\n            if (aRecurs === bRecurs) {\n                return a.listName.localeCompare(b.listName)\n            }\n\n            return aRecurs - bRecurs\n        })\n\n        const completedLists = lists.filter(list => {\n            return list.items.length > 0 && list.items.filter(item => item.isChecked).length === list.items.length\n        })\n\n        const unCompletedLists = lists.filter(list => {\n            return list.items.length === 0 || list.items.filter(item => item.isChecked).length !== list.items.length\n        })\n\n        return (\n            <Fragment>\n                <div className=\"border\">\n\n                    <div className=\"px-3 pt-3 mb-3 d-flex justify-content-between align-items-center\">\n                        <h3 className=\"m-0\">Lists</h3>\n                        <Button size=\"sm\" onClick={this.props.createNewList}>New</Button>\n                    </div>\n\n                    <ListGroup flush={true}>\n                        {unCompletedLists.map(list => {\n                            const isActive = list.id === this.props.activeListId\n\n                            return (\n                                <ListGroupItem\n                                    key={list.id}\n                                    tag=\"button\"\n                                    action\n                                    active={isActive}\n                                    onClick={() => this.handleChangeActiveList(list.id)}>\n\n                                    <ListItemContent list={list} />\n                                </ListGroupItem>\n                            )\n                        })}\n                    </ListGroup>\n\n                </div>\n\n                {completedLists.length > 0 &&\n                    <div className=\"mt-2 border\">\n                        <ListGroup flush={true}>\n                            {completedLists.map(list => {\n                                const isActive = list.id === this.props.activeListId\n\n                                return (\n                                    <ListGroupItem\n                                        color=\"success\"\n                                        key={list.id}\n                                        tag=\"button\"\n                                        action\n                                        active={isActive}\n                                        onClick={() => this.handleChangeActiveList(list.id)}>\n\n                                        <ListItemContent list={list} />\n                                    </ListGroupItem>\n                                )\n                            })}\n                        </ListGroup>\n                    </div>\n                }\n            </Fragment>\n\n        )\n    }\n}\n\nexport default connect(null, mapDispToProps)(ListOfTodoLists)\n","import React from 'react';\nimport { Row, Col, Container } from 'reactstrap';\nimport { List } from './model/models';\nimport { connect } from 'react-redux';\nimport { State } from './redux/store';\nimport TodoList from './component/TodoList';\nimport ListOfTodoLists from './component/ListOfTodoLists';\n\ninterface Props {\n    activeList: List\n    lists: List[]\n}\n\nfunction mapStateToProps(state: State) {\n    return {\n        activeList: state.lists.filter(list => list.id === state.activeListId)[0],\n        lists: state.lists\n    }\n}\n\nclass App extends React.Component<Props> {\n\n    render() {\n        return (\n            <div className=\"my-4 d-flex justify-content-center w-100\" >\n                <Container>\n                    <Row>\n                        <Col lg={7}>\n\n                            <TodoList list={this.props.activeList} />\n\n                        </Col>\n                        <Col lg={5} className=\"mb-4 order-first\">\n\n                            <ListOfTodoLists activeListId={this.props.activeList.id}\n                                lists={this.props.lists} />\n\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { composeWithDevTools } from 'redux-devtools-extension'\nimport { createStore } from \"redux\";\nimport { List } from \"../model/models\";\nimport { AppActions } from \"./actions\";\nimport { ActionType, getType } from \"typesafe-actions\";\nimport * as uuid from 'uuid'\nimport { saveToLocalStorage, loadFromLocalStorage } from './local-storage';\nimport { updateList } from '../util/recur-engine';\n\nexport interface State {\n    activeListId: string,\n    lists: List[]\n}\n\nfunction createEmptyList(): List {\n\n    const startFrom = new Date()\n\n    return {\n        id: uuid.v1(),\n        createdAt: new Date(),\n        modifiedAt: new Date(),\n        listName: `untitled list`,\n        items: [],\n        recurs: {\n            period: \"weeks\",\n            length: 1,\n            startFrom,\n            previouslyRecurred: null,\n        }\n    }\n}\n\nlet firstListUuid = uuid.v1()\n\nconst initState = (): State => {\n    const startFrom = new Date()\n\n    return {\n        activeListId: firstListUuid,\n        lists: [{\n            id: firstListUuid,\n            createdAt: new Date(),\n            modifiedAt: new Date(),\n            listName: `untitled list`,\n            items: [],\n            recurs: {\n                period: \"weeks\",\n                length: 1,\n                startFrom,\n                previouslyRecurred: null,\n            }\n        }]\n    }\n}\n\nfunction rootReducer(\n    state: State = initState(),\n    action: ActionType<typeof AppActions>\n): State {\n\n    switch (action.type) {\n\n        case (getType(AppActions.resetRecuringItems)): {\n\n            const newLists = state.lists.map(list => {\n                return updateList(list)\n            })\n\n            return {\n                ...state,\n                lists: newLists\n            }\n        }\n\n        case (getType(AppActions.updateWhenListRecurs)): {\n            const list: List = {\n                ...state.lists.filter(list => list.id === action.payload.listId)[0],\n                modifiedAt: new Date(),\n                recurs: action.payload.recurs\n            }\n\n            return {\n                ...state,\n                lists: [\n                    ...state.lists.filter(list => list.id !== action.payload.listId),\n                    list\n                ]\n            }\n        }\n\n        case (getType(AppActions.changeActiveList)): {\n            return {\n                ...state,\n                activeListId: action.payload.listId,\n            }\n        }\n\n        case (getType(AppActions.deleteList)): {\n            const prunedListsList = state.lists.filter(list => list.id !== action.payload.listId)\n            const listIndex = state.lists.findIndex(list => list.id === action.payload.listId)\n\n            let nextIndex = prunedListsList.length - 1\n\n            if (listIndex <= nextIndex) {\n                nextIndex = listIndex\n            }\n\n            return {\n                ...state,\n                lists: prunedListsList,\n                activeListId: prunedListsList[nextIndex].id\n            }\n        }\n\n        case (getType(AppActions.createNewList)): {\n\n            const newList = createEmptyList()\n\n            return {\n                ...state,\n                lists: [\n                    ...state.lists,\n                    newList\n                ],\n                activeListId: newList.id,\n            }\n        }\n\n        case (getType(AppActions.addTodoItem)): {\n\n            const list = state.lists.filter(list => list.id === action.payload.listId)[0]\n            list.items.push(action.payload.item)\n\n            return {\n                ...state,\n                lists: [\n                    ...state.lists.filter(list => list.id !== action.payload.listId),\n                    {\n                        ...list,\n                        items: [\n                            ...list.items\n                        ]\n                    }\n                ]\n            }\n        }\n\n        case (getType(AppActions.deleteItem)): {\n            const list = state.lists.filter(list => list.id === action.payload.listId)[0]\n\n            return {\n                ...state,\n                lists: [\n                    ...state.lists.filter(list => list.id !== action.payload.listId),\n                    {\n                        ...list,\n                        items: [\n                            ...list.items.filter(item => item.id !== action.payload.itemId)\n                        ]\n                    }\n                ]\n            }\n        }\n\n        case (getType(AppActions.updateItem)): {\n\n            const list = state.lists.filter(list => list.id === action.payload.listId)[0]\n            const updatedItem = action.payload.item\n\n            return {\n                ...state,\n                lists: [\n                    ...state.lists.filter(list => list.id !== action.payload.listId),\n                    {\n                        ...list,\n                        items: [\n                            ...list.items.filter(item => item.id !== updatedItem.id),\n                            updatedItem,\n                        ]\n                    }\n                ]\n            }\n\n        }\n\n        case (getType(AppActions.renameList)): {\n\n            const listToUpdate = state.lists.filter(list => list.id === action.payload.listId)[0]\n\n            return {\n                ...state,\n                lists: [\n                    ...state.lists.filter(list => list.id !== action.payload.listId),\n                    {\n                        ...listToUpdate,\n                        listName: action.payload.name,\n                    }\n                ]\n            }\n\n        }\n\n    }\n\n    return state\n}\n\nexport const store = createStore(\n    rootReducer,\n    loadFromLocalStorage(),\n    composeWithDevTools()\n)\n\nstore.subscribe(() => {\n    saveToLocalStorage(store.getState())\n})\n","import { State } from \"./store\";\n\nexport function saveToLocalStorage(state: State) {\n    const jsonState = JSON.stringify(state)\n    window.localStorage.setItem('state', jsonState)\n}\n\nexport function loadFromLocalStorage(): State | undefined {\n\n    try {\n\n        const jsonState = window.localStorage.getItem('state')\n\n        if (jsonState == null) {\n            return undefined\n        }\n\n        // https://stackoverflow.com/a/24660721/1891491\n        return JSON.parse(jsonState, function (name, value) {\n            if (typeof value === \"string\" && /^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d.\\d\\d\\dZ$/.test(value)) {\n                return new Date(value);\n            }\n            return value;\n        })\n\n    } catch (error) {\n        console.error(error);\n        return undefined\n    }\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './css/index.scss';\nimport 'react-datepicker/dist/react-datepicker.css'\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport { AppActions } from './redux/actions';\n\nsetInterval(() => {\n    store.dispatch(AppActions.resetRecuringItems())\n}, 5000)\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}